Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.7.16/x64/lib/python3.7/site-packages/jupyter_cache/executors/utils.py", line 64, in single_nb_execution
    **kwargs,
  File "/opt/hostedtoolcache/Python/3.7.16/x64/lib/python3.7/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/hostedtoolcache/Python/3.7.16/x64/lib/python3.7/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/opt/hostedtoolcache/Python/3.7.16/x64/lib/python3.7/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/opt/hostedtoolcache/Python/3.7.16/x64/lib/python3.7/asyncio/base_events.py", line 587, in run_until_complete
    return future.result()
  File "/opt/hostedtoolcache/Python/3.7.16/x64/lib/python3.7/site-packages/nbclient/client.py", line 664, in async_execute
    cell, index, execution_count=self.code_cells_executed + 1
  File "/opt/hostedtoolcache/Python/3.7.16/x64/lib/python3.7/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/hostedtoolcache/Python/3.7.16/x64/lib/python3.7/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import ipywidgets as widgets
from ipywidgets import interact, interactive, interact_manual, interactive_output, Label
import numpy as np
from matplotlib import pyplot as plt

# Define initial parameters
init_phi = 0.4 # Flow coefficient
init_psi = 1 # Loading factor
init_R = 0.5 # Degree of reaction
init_pitch_stat = 3
init_pitch_rot = 3

# Define plot parameters
scale_fig1 = 1.5  
fontsize = 16

def turbine_gui(phi, psi, R, pitch_stat, pitch_rot, show_velocity=True): 
    
    
    offset_y = 0 if show_velocity == True else 0.25

    # Initialize figure 
    fig1, ax1 = plt.subplots(figsize=(scale_fig1*6.4, scale_fig1*4.8))

    # Set parameters left subplot
    ax1.set_xlabel('x', fontsize=fontsize)
    ax1.set_ylabel('y', fontsize=fontsize)
    ax1.set_xlim(-10, 10)
    ax1.set_ylim(-7, 2)
    
    [stator, rotor, x, U] = turbine_blades(phi, psi, R)
    
    for i in range(-10, 11):
        
        ax1.plot(stator[:,0] + i*pitch_stat, stator[:,1] + 0.25 - offset_y, lw=3, c='r')
        ax1.plot(rotor[:,0] + i*pitch_rot, rotor[:,1] - 0.25 + offset_y, lw=3, c='b')
    
    if show_velocity == True:
        
        offset = 0
        head_length=0.3
        head_width=0.3
        # Draw velocity profiles
        # Stator inlet
        ax1.arrow(offset, 1.5, offset-x[1]-U, -1, color='r', head_length=head_length, head_width=head_width, length_includes_head=True)  # C1

        # Stator outlet / rotor inlet
        ax1.arrow(offset, -2, -x[0], -1, color='r', head_length=head_length, head_width=head_width, length_includes_head=True, label='absolute velocity')  # C2
        ax1.arrow(offset, -2, -x[0]+U, -1, color='b', head_length=head_length, head_width=head_width, length_includes_head=True, label='relative velocity')  # W2
        ax1.arrow(offset-x[0]+U, -3, -U, 0, color='g', head_length=head_length, head_width=head_width, length_includes_head=True, label='rotational velocity')  # U

        # Rotor outlet
        ax1.arrow(offset, -5.5, -x[1]-U, -1, color='r', head_length=head_length, head_width=head_width, length_includes_head=True)  # C3
        ax1.arrow(offset, -5.5, -x[1], -1, color='b', head_length=head_length, head_width=head_width, length_includes_head=True)  # W3
        ax1.arrow(offset-x[1], -6.5, -U, 0, color='g', head_length=head_length, head_width=head_width, length_includes_head=True)  # U
        
        ax1.legend()
        
    # Update plot
    
    plt.show()

# Define interactive widgets
a = widgets.FloatSlider(value=init_phi, min=0, max=2, step=0.01, description=r'$\phi$')
b = widgets.FloatSlider(value=init_psi, min=0, max=5, step=0.01, description=r'$\psi$')
c = widgets.FloatSlider(value=init_R, min=0, max=2, step=0.01, description=r'$R$')
d = widgets.FloatSlider(value=init_pitch_stat, min=0, max=10, step=0.01, description='Pitch stator')
e = widgets.FloatSlider(value=init_pitch_rot, min=0, max=10, step=0.01, description='Pitch rotor')
f = widgets.Checkbox(True,  description='Show velocity triangles')

    
# Layout of widgets
ui0 = widgets.HBox([a, d])
ui1 = widgets.HBox([b, e])
ui2 = widgets.HBox([c, f])

ui = widgets.VBox([ui0, ui1, ui2])

# Activate interactivity with plot!
out = widgets.interactive_output(turbine_gui, {'phi': a, 'psi': b, 'R': c, 'pitch_stat': d, 'pitch_rot': e, 'show_velocity': f})
display(ui, out)

------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
[0;32m/tmp/ipykernel_1931/516198940.py[0m in [0;36m<module>[0;34m[0m
[0;32m----> 1[0;31m [0;32mimport[0m [0mipywidgets[0m [0;32mas[0m [0mwidgets[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      2[0m [0;32mfrom[0m [0mipywidgets[0m [0;32mimport[0m [0minteract[0m[0;34m,[0m [0minteractive[0m[0;34m,[0m [0minteract_manual[0m[0;34m,[0m [0minteractive_output[0m[0;34m,[0m [0mLabel[0m[0;34m[0m[0;34m[0m[0m
[1;32m      3[0m [0;32mimport[0m [0mnumpy[0m [0;32mas[0m [0mnp[0m[0;34m[0m[0;34m[0m[0m
[1;32m      4[0m [0;32mfrom[0m [0mmatplotlib[0m [0;32mimport[0m [0mpyplot[0m [0;32mas[0m [0mplt[0m[0;34m[0m[0;34m[0m[0m
[1;32m      5[0m [0;34m[0m[0m

[0;31mModuleNotFoundError[0m: No module named 'ipywidgets'
ModuleNotFoundError: No module named 'ipywidgets'

