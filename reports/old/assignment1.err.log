Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.7.16/x64/lib/python3.7/site-packages/jupyter_cache/executors/utils.py", line 64, in single_nb_execution
    **kwargs,
  File "/opt/hostedtoolcache/Python/3.7.16/x64/lib/python3.7/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/hostedtoolcache/Python/3.7.16/x64/lib/python3.7/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/opt/hostedtoolcache/Python/3.7.16/x64/lib/python3.7/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/opt/hostedtoolcache/Python/3.7.16/x64/lib/python3.7/asyncio/base_events.py", line 587, in run_until_complete
    return future.result()
  File "/opt/hostedtoolcache/Python/3.7.16/x64/lib/python3.7/site-packages/nbclient/client.py", line 664, in async_execute
    cell, index, execution_count=self.code_cells_executed + 1
  File "/opt/hostedtoolcache/Python/3.7.16/x64/lib/python3.7/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/hostedtoolcache/Python/3.7.16/x64/lib/python3.7/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import ipywidgets as widgets
from ipywidgets import interact, interactive, interact_manual, interactive_output, Label
import numpy as np
from matplotlib import pyplot as plt

# Define initial parameters
R = 287 # universal gas constant [J kg^-1 K^-1]
init_PR = 8 # Initial pressure ratio
init_TR = 5 # Initial temperature ratio
init_PR_cc = 1 # Initial pressure ratio over combustion chamber
init_etap_c = 1 # Initial polytropic efficiency compressor
init_etap_t = 1 # Initial polytropic efficiency turbine
init_gam_c = 1.4 # Initial heat capacity ratio combustor
init_gam_t = 1.4 # Initial heat capacity ratio turbine

# Define plot parameters
scale_fig1 = 1.5  
fontsize = 16
color = ['b', 'r']
        
def solve_cycle(PR1=init_PR, TR1=init_TR, gam_c1=init_gam_c, gam_t1=init_gam_t, etap_c1=1, etap_t1=1, PR_cc1=init_PR_cc, PR2=init_PR, TR2=init_TR, gam_c2=init_gam_c, gam_t2=init_gam_t, etap_c2=1, etap_t2=1, PR_cc2=init_PR_cc, semilogy=True, cycle1='Basic', cycle2='Basic'): 
    
    # Initialize figure with two subplots
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(scale_fig1*6.4*2, scale_fig1*4.8))
    
    # Set parameters left subplot
    ax1.set_xlabel(r'Entropy [$J.K^{-1}kg^{-1}$]', fontsize=fontsize)
    ax1.set_ylabel(r'Temperature [$K$]', fontsize=fontsize)
    ax1.set_xlim(-650, 2000)
    ax1.set_ylim(200, 2300)
    
    y_ticks_list1 = [200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000, 2200]
    y_ticks_list2 = [200, 400, 600, 800, 1000, 1200, 1400, 1800, 2200]
    y_ticks_list3 = [str(y_tick) for y_tick in y_ticks_list2]
    
    # Check if left subplot uses linear or semilogical scale on the y-axis
    if semilogy == True:
        ax1.set_yscale("log")
        ax1.set_yticks(y_ticks_list2)
        ax1.set_yticklabels(y_ticks_list3)
    elif semilogy == False:
        ax1.set_yscale("linear")
        ax1.set_yticks(y_ticks_list1) 
        
    # Set parameters right subplot
    ax2.set_xlabel('Specific work', fontsize=fontsize)
    ax2.set_ylabel('Efficiency', fontsize=fontsize)
    ax2.set_xlim(0, 4)
    ax2.set_ylim(0, 1)
    
    # Lists of cycle parameters
    cycle = [cycle1, cycle2]
    PR = [PR1, PR2]
    TR = [TR1, TR2]
    gam_c = [gam_c1, gam_c2]
    gam_t = [gam_t1, gam_t2]
    etap_c = [etap_c1, etap_c2]
    etap_t = [etap_t1, etap_t2]
    PR_cc = [PR_cc1, PR_cc2]
    
    # Initialize arrays for contour plots
    PR_range = np.arange(2., 64.01, 2.0)
    TR_range = np.arange(3., 7.01, 0.5)
    specw_list = np.zeros((2, len(PR_range), len(TR_range)))
    eta_list = np.zeros((2, len(PR_range), len(TR_range)))
    P = np.zeros((len(PR_range), len(TR_range)))
    T = np.zeros((len(PR_range), len(TR_range)))
    
    # PLOTS
    for nr in range(len(cycle)):
        
        i = 0
        j = 0
        
        # LEFT PLOT: cycle 1 and 2
        if cycle[nr] == 'Basic': my_func = cycBasic
        if cycle[nr] == 'Recuperated': my_func = cycRecup
        if cycle[nr] == 'Assignment': my_func = cycAssign
        
        [specw, eta, entr0, temp0] = my_func(PR[nr], TR[nr], gam_c[nr], gam_t[nr], R, etap_c[nr], etap_t[nr], PR_cc[nr])
        line_left, = ax1.plot(entr0, temp0, lw=2, ls='-', c=color[nr])
        line_right, = ax2.plot(specw, eta, lw=2, c=color[nr], marker='o', ms=12)
        
        # RIGHT PLOT: Plot pressure and temperature contours
        for i in range(len(PR_range)):
            for j in range(len(TR_range)):
                if cycle[nr] == 'Basic': my_func = cycBasic
                if cycle[nr] == 'Recuperated': my_func = cycRecup
                if cycle[nr] == 'Assignment': my_func = cycAssign
                
                [specw_test, eta_test, entr0_test, temp0_test] = cycBasic(PR_range[i], TR_range[j], gam_c[nr], gam_t[nr], R, etap_c[nr], etap_t[nr], PR_cc[nr])
                specw_list[nr][i][j] = specw_test
                eta_list[nr][i][j] = eta_test
                P[i][j] = PR_range[i]
                T[i][j] = TR_range[j]
                
                j +=1
            i += 1
            
        CS_P = ax2.contour(specw_list[nr], eta_list[nr], P, levels=[2, 4, 8, 16, 32, 63.9999], colors=color[nr], linestyles='--', linewidths=1)
        ax2.clabel(CS_P, fontsize=fontsize, inline=True)
        
        CS_T = ax2.contour(specw_list[nr], eta_list[nr], T, levels=[3, 4, 5, 6, 6.9999], colors=color[nr], linestyles='--', linewidths=1)
        ax2.clabel(CS_T, fontsize=fontsize, inline=True)
        
        CS_P_current = ax2.contour(specw_list[nr], eta_list[nr], P, levels=[PR[nr]], colors=color[nr], linestyles='-', linewidths=3)
        ax2.clabel(CS_P_current, fontsize=fontsize, inline=True)
        
        CS_T_current = ax2.contour(specw_list[nr], eta_list[nr], T, levels=[TR[nr]], colors=color[nr], linestyles='-', linewidths=3)
        ax2.clabel(CS_T_current, fontsize=fontsize, inline=True)
        
        ### Show minimum, maximum temperature, cycle efficiency and specific work
        if nr == 0:
            p1.value = str(round(np.min(temp0), 2))
            p2.value = str(round(np.max(temp0), 2))
            p3.value = str(round(100*np.min(eta), 2))
            p4.value = str(round(specw, 2))
        else:
            q1.value = str(round(np.min(temp0), 2))
            q2.value = str(round(np.max(temp0), 2))
            q3.value = str(round(100*np.min(eta), 2))
            q4.value = str(round(specw, 2))
    
    # LEFT PLOT: Isobars
    cp = R*gam_c1/(gam_c1-1) # Specific heat capacity
    isobars = [1, 2, 4, 8, 16, 32, 64]
    power_isobars = [isobar ** ((gam_c1-1)/gam_c1) for isobar in isobars]
    T02isob = [power_isobar*293.15 for power_isobar in power_isobars]
    s = np.linspace(-650,2000)
    TRisob = np.exp(s/cp)

    for isobar in T02isob:
        ax1.plot(s, isobar*TRisob, 'k', lw=0.5) 

    # Turn on grid
    ax1.grid()
    ax2.grid()
    
    # Set fontsize x- and y- tick labels
    ax1.xaxis.set_tick_params(labelsize=fontsize)
    ax1.yaxis.set_tick_params(labelsize=fontsize)
    ax2.xaxis.set_tick_params(labelsize=fontsize)
    ax2.yaxis.set_tick_params(labelsize=fontsize)
    
    # Update plot
    plt.show()

# Define interactive widgets
cycle1 = widgets.Dropdown(options=['Basic','Recuperated','Assignment'], description=r'\(\color{blue} {' + 'Cycle\ 1'  + '}\)')
cycle2 = widgets.Dropdown(options=['Basic','Recuperated','Assignment'], description=r'\(\color{red} {' + 'Cycle\ 2'  + '}\)')
a = widgets.FloatLogSlider(value=init_PR, base=2, min=1, max=6, step=0.1, description='PR1', style = {'handle_color': 'blue'})
b = widgets.FloatLogSlider(value=init_PR, base=2, min=1, max=6, step=0.1, description='PR2', style = {'handle_color': 'red'})
c = widgets.FloatSlider(value= init_TR, min=3, max=7, step=0.5, description='TR1', style = {'handle_color': 'blue'})
d = widgets.FloatSlider(value= init_TR, min=3, max=7, step=0.5, description='TR2', style = {'handle_color': 'red'})
e = widgets.FloatSlider(value= init_gam_c, min=1., max=1.8, step=0.01, description=r'$\gamma_{comp,1}$', style = {'handle_color': 'blue'})
f = widgets.FloatSlider(value= init_gam_c, min=1., max=1.8, step=0.01, description=r'$\gamma_{comp,2}$', style = {'handle_color': 'red'})
g = widgets.FloatSlider(value= init_gam_t, min=1., max=1.8, step=0.01, description=r'$\gamma_{turb,1}$', style = {'handle_color': 'blue'})
h = widgets.FloatSlider(value= init_gam_t, min=1., max=1.8, step=0.01, description=r'$\gamma_{turb,2}$', style = {'handle_color': 'red'})
i = widgets.FloatSlider(value= init_PR_cc, min=0.01, max=1., step=0.01, description=r'$PR_{cc,1}$', style = {'handle_color': 'blue'})
j = widgets.FloatSlider(value= init_PR_cc, min=0.01, max=1., step=0.01, description=r'$PR_{cc,2}$', style = {'handle_color': 'red'})
k = widgets.FloatSlider(value= init_etap_c, min=0.01, max=1., step=0.01, description=r'$\eta_{p,comp1}$', style = {'handle_color': 'blue'})
l = widgets.FloatSlider(value= init_etap_c, min=0.01, max=1., step=0.01, description=r'$\eta_{p,comp2}$', style = {'handle_color': 'red'})
m = widgets.FloatSlider(value= init_etap_t, min=0.01, max=1., step=0.01, description=r'$\eta_{p,turb1}$', style = {'handle_color': 'blue'})
n = widgets.FloatSlider(value= init_etap_t, min=0.01, max=1., step=0.01, description=r'$\eta_{p,turb2}$', style = {'handle_color': 'red'})
o = widgets.Checkbox(True,  description='Plot in semilogy')

# Define labels cycle 1
p1 = widgets.Text(value='', description=r'$\color{blue} {' + 'T_{min} [K] ='  + '}$', disabled=True)
p2 = widgets.Text(value='', description=r'$\color{blue} {' + 'T_{max} [K] ='  + '}$', disabled=True)
p3 = widgets.Text(value='', description=r'$\color{blue} {' + '\eta [\%] ='  + '}$', disabled=True)
p4 = widgets.Text(value='', description=r'$\color{blue} {' + 'w_{s} ='  + '}$', disabled=True)

# Define labels cycle 2
q1 = widgets.Text(value='', description=r'$\color{red} {' + 'T_{min} [K] ='  + '}$', disabled=True)
q2 = widgets.Text(value='', description=r'$\color{red} {' + 'T_{max} [K] ='  + '}$', disabled=True)
q3 = widgets.Text(value='', description=r'$\color{red} {' + '\eta [\%] ='  + '}$', disabled=True)
q4 = widgets.Text(value='', description=r'$\color{red} {' + 'w_{s} ='  + '}$', disabled=True)
    
# Layout of widgets
ui0 = widgets.HBox([cycle1, cycle2])
ui1 = widgets.HBox([a, b, p1, q1])
ui2 = widgets.HBox([c, d, p2, q2])
ui3 = widgets.HBox([e, f, p3, q3])
ui4 = widgets.HBox([g, h, p4, q4])
ui5 = widgets.HBox([i, j])
ui6 = widgets.HBox([k, l])
ui7 = widgets.HBox([m, n])
ui8 = widgets.HBox([o])
ui = widgets.VBox([ui0, ui1, ui2, ui3, ui4, ui5, ui6, ui7, ui8])

# Activate interactivity with plot!
out = widgets.interactive_output(solve_cycle, {'PR1': a, 'PR2': b, 'TR1': c, 'TR2': d, 'gam_c1': e, 'gam_c2': f, 'gam_t1': g, 'gam_t2': h, 'PR_cc1': i, 'PR_cc2': j, 'etap_c1': k, 'etap_c2': l, 'etap_t1': m, 'etap_t2': n, 'semilogy':o, 'cycle1': cycle1, 'cycle2': cycle2})
display(ui, out)

------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
[0;32m/tmp/ipykernel_2018/3113351472.py[0m in [0;36m<module>[0;34m[0m
[0;32m----> 1[0;31m [0;32mimport[0m [0mipywidgets[0m [0;32mas[0m [0mwidgets[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      2[0m [0;32mfrom[0m [0mipywidgets[0m [0;32mimport[0m [0minteract[0m[0;34m,[0m [0minteractive[0m[0;34m,[0m [0minteract_manual[0m[0;34m,[0m [0minteractive_output[0m[0;34m,[0m [0mLabel[0m[0;34m[0m[0;34m[0m[0m
[1;32m      3[0m [0;32mimport[0m [0mnumpy[0m [0;32mas[0m [0mnp[0m[0;34m[0m[0;34m[0m[0m
[1;32m      4[0m [0;32mfrom[0m [0mmatplotlib[0m [0;32mimport[0m [0mpyplot[0m [0;32mas[0m [0mplt[0m[0;34m[0m[0;34m[0m[0m
[1;32m      5[0m [0;34m[0m[0m

[0;31mModuleNotFoundError[0m: No module named 'ipywidgets'
ModuleNotFoundError: No module named 'ipywidgets'

